openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
paths:
  /user:
    get:
      tags:
        - User
      summary: Get user information
      description: Retrieve information about users.
      responses:
        '200':
          description: Successful response
    post:
      tags:
        - User
      summary: Create a new user
      description: Create a new user profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request

  /user/{userId}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieve user information by user ID.
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: User not found

  /user/{email}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieve user information by user ID.
      parameters:
        - name: email
          in: path
          description: User email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /user/signup:
    post:
      tags:
        - User
      summary: Sign up user
      description: Register user
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email address of the user
                password:
                  type: string
                  format: password
                  description: Password email of the user
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email address of the user
                password:
                  type: string
                  format: password
                  description: Password email of the user
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '400':
          description: Bad request

  /user/signin:
    post:
      tags:
        - User
      summary: User login
      description: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        image:
          type: string
          description: URL of the user's image
        age:
          type: integer
          description: Age of the user
          minimum: 18
          maximum: 120
        phone:
          type: integer
          description: Phone number of the user
        country:
          type: string
          description: Country where the user resides
        state:
          type: string
          description: State where the user resides
        role:
          type: string
          description: Role of the user (User, Hotel, Admin)
          enum:
            - User
            - Hotel
            - Admin
        status:
          type: string
          description: Status of the user account
          enum:
            - Active
            - Inactive
            - Supended
            - Banned
      example:
        firstName: John
        lastName: Doe
        email: john@example.com
        image: https://example.com/profile.jpg
        age: 30
        phone: 1234567890
        country: United States
        state: California
        role: User
        status: Active
        createdAt: '2023-08-23T12:34:56Z'
        updatedAt: '2023-08-23T14:45:32Z'

    SignUpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@example.com
        password:
          type: string
          format: password
          description: Password of the user account.
          example: mysecretpassword
      required:
        - email
        - password

    SignUpResponse:
      type: object
      properties:
        message:
          type: string
          description: Registration success message
          example: User registered successfully

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: Password of the user account.
      required:
        - email
        - password
      example:
        email: findhotel@gmail.com
        password: mysecretpassword

    SignInResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authenticated requests
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
